@import url('https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap');

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    list-style: none;
    outline: none;
    text-decoration: none;
    font-family: 'Work Sans', sans-serif;
}

html{
    font-size: 62.5%;
    scroll-behavior: smooth;
}

/* create CSS variables for the colors*/
:root{ /*documents root element*/
    --primary-color: #6edae6; /* the names of the variables should have double hyphen signs */
    --white-color: #fff;
    --black-color:#000;
}

/*Because this technique is used frequently throughout the project.
To avoid using the same properties and values over and over again,
create a new class in common styles and assign it in the html*/
.center{
    display: flex;
    justify-content: center; /*horizonal center*/
    align-items: center; /*vertical center*/
}

.section-1{
    width: 100%;
    height: 100vh;
    /* background-color: var(--primary-color); /* to use one of the variables,
    use a function called var, which stands for variable, 
    and then specify the name of the variable inside the () 
    don't need this background color anymore because of the slideshow images background*/
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    clip-path: polygon(100% 0%, 100% 95%, 38% 100%, 0 100%, 0 0); /*https://bennettfeely.com/clippy/*/
    /*to cut off at the bottom right corner */
    position: relative;
}

.logo{
    position: absolute; /**It's going to be placed at the top left corner of the page.*/
    top: 3rem;
    left: 3rem;
}
.logo i{
    font-size: 10rem;
    color: rgba(0, 0, 0, 0.9);
}
.navbar{
    position: absolute; /*position : top right corner*/
    top: 3rem;
    right: 10%;
}
.navbar-link{
    font-size: 2rem;
    display: inline-block; /*to make links inline block elements. 
    When the element is an inline-block level, you can assign width, height, margin and padding
    and they will still behave like an inline element. */
    margin: 0 3rem;
    color: var(--black-color);
    transition: transform 0.5s;
}
.navbar-link:hover{
    transform: scale(1.5);
    color: var(--white-color);
    opacity: 0.8;
}
.cube-wrapper{
    perspective: 100rem; /*for 3d environment*/
}
.cube{
    width: 30rem;
    height: 55rem;
    transform-style: preserve-3d; 
    /*3D space for the front side as well.
    And it will share the 3D environment to its child elements.*/
    transform: rotateX(0) rotateY(20deg) rotateZ(0); 
    /*to see what's going on and commented to be able to make the cube rotating automatically */
    position: relative;
    top: -2rem; /*to move the cube up assing position relative and then define top property
    So because of the position relative, the element will move up by 2rem from its current position*/
    transition: transform 0.5s; /*for a smoother rotation effect (script.js)*/
}
.front-side,
.back-side{
    width: 100%;
    height: 100%;
    background-color: var(--white-color);
    position: absolute;
    /*to share the 3D environment for the before pseudo element,
    we have to assign transform style, preserve 3D to the parent element.*/
    transform-style: preserve-3d;
    box-shadow: inset 0.1rem 0.1rem 0.1rem #e7e6e6,
    inset -0.1rem -0.1rem 0.1rem #e7e6e6;
}
.front-side{
    padding: 2.5rem;
    transform: translateZ(5rem); /* to move the front side a little bit to the front */
}

/*to take care of the top and bottom sides 
we need to use before and after pseudo elements.*/
.front-side::before,
.front-side::after{
    content: "";
    width: 100%;
    height: 10rem;
    background-color: var(--white-color);
    position: absolute;
    box-shadow: inset 0.1rem 0.1rem 0.1rem #e7e6e6,
    inset -0.1rem -0.1rem 0.1rem #e7e6e6;
}
.front-side::before{
    top: 0;
    left: 0;
    transform: rotateX(-90deg);
    transform-origin: top;
}
.front-side::after{
    bottom: 0;
    left: 0;
    transform: rotateX(90deg);
    transform-origin: bottom;
}
.front-side img{
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.back-side{
    transform: translateZ(-5rem);
}
.back-side::before,
.back-side::after{
    width: 10rem;
    height: 100%;
    background-color: var(--white-color);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: inset 0.1rem 0.1rem 0.1rem #e7e6e6,
    inset -0.1rem -0.1rem 0.1rem #e7e6e6;
}
.back-side::before{
    top: 0;
    left: 0;
    transform: rotateY(-90deg);
    transform-origin: left;
    content: "iPhone";
    text-shadow: 0.1rem 0.1rem 0.1rem #959595,
    -0.1rem -0.1rem 0.1rem #959595;
    font-size: 3rem;
    font-weight: lighter;
    color: var(--white-color);
    writing-mode: vertical-lr;
}
.back-side::after{
    content: "";
    top: 0;
    right: 0;
    transform: rotateY(90deg);
    transform-origin: right;
}

.back-side i{
    font-size: 10rem;
    opacity: 0.8;
    color: #dadada;
    text-shadow: 0.1rem 0.1rem 0.1rem #5f5f5f,
    -0.1rem -0.1rem 0.1rem #5f5f5f;
    transform: rotateY(180deg); /*to rotate the apple*/
}

.controls{
    position: absolute;
/* in this case we don't need a position relative for the cube-wrapper, 
because it is a flex item -> section-1 element has display flex.

So we no longer need position relative for the cube wrapper 
because the controls will be positioned according to the cube wrapper. */
    bottom: -15rem;
    left: 40%;
    transform: translateZ(-50%);
    margin-bottom: 2rem;
    width: 8rem;
    height: 8rem;
    background-color: var(--black-color);
    opacity: 0.9;
    border-radius: 50%;
    border: 1rem solid rgba(0, 0, 0, 0.8);
}

.controls a{ /* select the link element and then set position to absolute*/
    position: absolute;
}
.controls a:nth-child(1){ /*here we define the position for each arrow separately*/
    top: 0;
    left: 50%;
    transform: translateX(-50%);
}
.controls a:nth-child(2){ /*here we define the position for each arrow separately*/
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
}
.controls a:nth-child(3){ /*here we define the position for each arrow separately*/
    top: 50%;
    left: 0;
    transform: translateY(-50%);
}
.controls a:nth-child(4){ /*here we define the position for each arrow separately*/
    top: 50%;
    right: 0;
    transform: translateY(-50%);
}
.controls a:nth-child(5){ /*here we define the position for each arrow separately*/
    top: 10%;
    right: 10%;
    transform: rotate(45deg);
}
.controls a:nth-child(6){ /*here we define the position for each arrow separately*/
    bottom: 10%;
    left: 10%;
    transform: rotate(45deg);
}
.controls i{
    color: var(--primary-color);
    font-size: 1.4rem;
    opacity: 0.6;
    transition: opacity 0.3s;
}
.controls a:hover i{
    opacity: 1;
}
.section-1-banner{
    flex-direction: column;
}
.section-1-banner h1{
    font-size: 13rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 0.5rem;
}
.section-1-banner p{
    font-size: 3rem;
    font-weight: 300;
    letter-spacing: 0.3rem;
    margin: 4rem 0 4rem 0;
}
.section-1-banner span{
    font-size: 2.8rem;
    font-weight: 300;
    margin-bottom: 5rem;
}
.section-1-banner button{
    padding: 2rem 4rem;
    font-size: 2rem;
    background-color: var(--black-color);
    color: var(--primary-color);
    font-weight: 400;
    border-radius: 0.5rem;
    letter-spacing: 0.2rem;
    border: none;
    cursor: pointer;
    clip-path: polygon(
    50% 0%, 
    81% 5%, 
    100% 0,
    100% 100%, 
    80% 95%, 
    50% 100%, 
    20% 95%, 
    0 100%, 
    0 0, 
    23% 5%);
    transition: clip-path 0.5s;
}
.section-1-banner button:hover{
    clip-path: polygon(
    30% 15%, 
    77% 15%, 
    100% 10%,
    100% 90%, 
    75% 85%, 
    30% 85%, 
    30% 100%, 
    0 50%, 
    0 50%, 
    30% 0);
    color: var(--white-color);
}

.slide-show{
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1; /*so the content of the landing page don't ended up behind the images */
}

.slide-show div{
    width: 100%;
    height: 100%;
    position: absolute; /*so they are on top of each other*/
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0; /*to hide the div elements*/
    transition: opacity 5s; /*to create some fade effect for the slide show*/
}

/* to display the image, we select the div element with the class change 
and we need to set opacity to 1 */
.slide-show div.change{
    opacity: 1;
}

.section-2{
    width: 100%;
    height: 120vh;
    padding: 10vh 0; /*space at the top and bottom inside the section*/
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
}

.section-2-heading{
    font-size: 10rem;
    font-weight: 300;
    color: var(--black-color);
    text-shadow: -0.2rem -0.2rem 0.2rem var(--white-color);
    position: relative;
    margin-bottom: 5rem;
}

/*background of the heading created with pseudo element*/
.section-2-heading::before{
    content: "";
    position: absolute;
    width: 130%;
    height: 30vw;
    background-image: linear-gradient(var(--primary-color), var(--white-color));
    top:0;
    left: 0;
    transform: skewX(-50deg);
    transform-origin: left top;
    z-index: -1;
    border-radius: 1rem;
}

.images{
    height: 60vh;
    width: 50vw;
    background-image: linear-gradient(var(--primary-color), var(--white-color));
    border-radius: 0.5rem;
}
.iphone-img-1,
.iphone-img-2{
    width: inherit;
    height: inherit;
    object-fit: contain;
    position: absolute;
    padding: 2rem 0 2rem 0;
    transition: opacity 3s;
}
.iphone-img-2{
    opacity: 0;
}
.images:hover .iphone-img-1{
    opacity: 0;
}
.images:hover .iphone-img-2{
    opacity: 1;
}

.btn-wrapper{
    display: flex;
}
.iphone-btn{
    width: 6rem;
    height: 6rem;
    background-image: linear-gradient(to right, rgb(51,51,51) 60%, /*60% means that the transition of the colors
    will begin after 60% of the first color */
    rgb(82,82,82));
    margin: 0 3rem;
    border-radius: 50%;
    position: relative;
}
.iphone-btn::after{
    content: "";
    display: block;
    width: 50%;
    height: 50%;
    border: 0.15rem solid var(--primary-color);
    border-radius: 0.5rem;
}

.iphone-btn span{
    position: absolute;
    top: -3rem;
    font-size: 1.6rem;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.1rem;
    color: var(--primary-color);
    text-shadow: 0.1rem 0.1rem 0.1rem #000;
    width: max-content; /*The first element is broken on two different lines */
    transform: scale(0); /*to hide the elements*/
    transition: transform 0.5s;
}
.iphone-btn:hover span{
    transform: scale(1); /*to make it visibile again once we hover on it*/
}
.section-3{
    width: 100%;
    height: 100%;
    background-color: var(--black-color);
    flex-direction: column;
    padding: 15rem 0;
    clip-path: polygon(68% 0, 100% 0, 100% 97%, 38% 100%, 0 100%, 0 3%);
    /*to change the shape of the background of section 3*/
}
.section-3-heading{
    font-size: 10rem;
    font-weight: 200;
    color: var(--black-color);
    text-shadow: -0.1rem -0.1rem 0.1rem var(--primary-color);
}
.section-3-content{
    width: 80%;
    flex-direction: column;
    perspective: 1000rem; /*Because we will create some 3D effects -> like we will open MacBook in a 3D environment*/
    position: relative;
    /*position to relative in order to position it according to its parent element */
} 
.section-3-content img{
    width: inherit; /*so the image inherit the width from the parent element*/
}
.macbook-img-1{
    transform: rotateX(-80deg);
    transform-origin: bottom;
}
.change .macbook-img-1{
    transform: rotateX(0);/*to open the macbook when we scroll down*/
    transition: transform 3s;
}
.loading-wrapper{
    position: absolute; /*to fit it to the screen -> position relative in the parent element*/
    width: 60%;
    height: 85%;
    background: linear-gradient(rgba(255,255,255,0.3), rgba(255,255,255,0.3)), url('/images/MacBook/macbook-1-desktop.png') center no-repeat;
    z-index: -1; /* to place it behind the screen*/
    top: 7%;
    /*when you use position absolute 
    top and left positions are set to 0 by default.
    In this case, the loading-wrapper is a flex item -> centered using Flexbox (html file)
    So the position is changed and the top is no longer = to 0 */
    opacity: 0; /*to hide it*/
}
.change .loading-wrapper{
    opacity: 1;
    transition: opacity 1s 2s; /*second property is DELAAAAAY*/
}
.loading{
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: var(--black-color);
    flex-direction: column;
}
.change .loading{
    opacity: 0;
    transition: 1s 5s;
}
.loading i{
    font-size: 10rem;
    color: var(--white-color);
}
.progress-bar{
    width: 30rem;
    height: 0.3rem;
    background-color: #807f7f;
    border-radius: 5rem;
    margin-top: 3rem;
    position: relative;
}
.progress-bar::after{
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 0; /*no width because it will change in when the change class hs been assigned to it*/
    height: 100%;
    background-color: var(--white-color);
}
.change .progress-bar::after{
    width: 100%; /*So after the progress bar appears, then the width will increase*/
    transition: width 1s 2.8s; /*with duration 1 second and delay of 2.5 seconds*/
}

.macbook-info{
    position: absolute;
    width: 70rem;
    text-align: center;
    opacity: 0;
}
.change .macbook-info{ /*to display the macbook info*/
    opacity: 1;
    transition: opacity 1s 6s;
}
.macbook-info-heading{
    font-size: 8rem;
    font-weight: 300;
    color: var(--primary-color);
    text-shadow: -0.2rem -0.2rem 0.4rem var(--black-color);
}
.macbook-price{
    font-size: 2.5rem;
    font-weight: 300;
    opacity: 0.6;
    margin: 3rem 0;
}
.macbook-btn{
    width: 25rem;
    height: 5rem;
    background-image: linear-gradient(#ddd, var(--white-color));
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0.1rem 0.1rem 0.1rem #fff,
    -0.1rem -0.1rem 0.1rem #fff;
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 0.2rem;
    color: var(--primary-color);
    text-shadow: -0.1rem -0.1rem 0.10rem var(--black-color);    
    cursor: pointer;
    transform: scale(0);
}

.change .macbook-info:hover button{
    transform: scale(1); /*to make it visibile again once we hover on it*/
    transition: transform 1s 0.5s;
}

.section-4{
    height: 140vh;
    padding: 15vh 4vh;
    flex-direction: column;
    position: relative;
}
.watches{
    position: relative; /*for the parent element*/
    width: 100%;
    height: 100%;
    overflow: hidden; /*to hide some elements, for it to work you need height with viewport*/
}
.watches > div{
    position: absolute;
    /*to assign to the div elements position absolute.
    I mean wrappers of bands and cases 
    I'm going to use one of the CSS combinators called child selector 
    which selects the direct child elements, in this case direct div elements.*/
}

.bands{
    transition: margin-right 1s;
}

.watch-band-img{
    width: 35rem;
    height: 35rem;
    object-fit: contain;
}
.cases{
    flex-direction: column;
    padding-top: 35rem; /*padding instead of margin to fix the cases moving only once (script.js)*/
    transition: margin-top 1s;
}
.watch-case-img{
    width: 35rem;
    height: 35rem;
    object-fit: contain;
}

/* check script.js */
.hideControl{
    opacity: 0;
    visibility: hidden;
}

.watch-controls{
    position: absolute; /*check relative in section 4*/
    width: 4rem;
    height: 4rem;
    background-color: rgba(132, 131, 131, 0.3);
    border-radius: 50%;
}
.watch-controls i{
    color: var(--primary-color);
    font-size: 2.5rem;
    text-shadow: 0.1rem 0.1rem 0.30rem var(--white-color);
}
.watch-top-control{
    top: 10vh;
    left: 50%;
    transform: translateX(-50%); /* to center the control vertically */
}
.watch-right-control{
    top: 50%;
    right: 2rem;
    transform: translateY(-50%);
}
.watch-left-control{
    top: 50%;
    left: 2rem;
    transform: translateY(-50%);
}
.watch-bottom-control{
    left: 50%;
    bottom: 10vh;
    transform: translateX(-50%);
}
.watch-btn{
    position: absolute;
    bottom: 30vh;
    right: 32%;
    width: 13rem;
    height: 5rem;
    background-color: rgba(132, 131, 131, 0.3);
    font-size: 1.8rem;
    border-radius: 1.5rem;
    border: none;
    color: var(--black-color);
    text-transform: uppercase;
    text-shadow: 0.1rem 0.1rem 0.30rem var(--primary-color);
    font-weight: 300;
    cursor: pointer;
}

.section-5{
    width: 100%;
    height: 100vh;
}
.airpods{
    width: 80%;
    height: 70%;
    display: flex; /*so they are aligned horizontally*/
    position: relative; /*parent element of section-5-headng*/
}
.airpods img{
    width: 50%;
    height: 100%;
    object-fit: contain;
}
.airpods-img-2{
    background-color: var(--primary-color);
}
.section-5-heading{
    position: absolute; /* to place it in the center horizontally */
    top: 0;
    left: 50%;
    transform: translateX(-50%); 
    /*in order to center the element perfectly, we need to move it to the left side.
    So we need transform, then translate function with X direction and we have to pass here -50%.*/
    font-size: 10rem;
    font-weight: 200;
    color: var(--white-color);
    text-shadow: -0.1rem -0.1rem 0.2rem var(--black-color);
}
.airpods-btns{
    position: absolute;
    top: 90%;
    left: 50%;
    transform: translate(-50%);
}
.airpods-btn{
    width: 15rem;
    height: 4rem;
    background-color: var(--primary-color);
    color: var(--white-color);
    margin: 0 1.5rem;
    border: none;
    border-radius: 15px;
    box-shadow: 0 6px var(--black-color);
    cursor: pointer;
    outline: none;
}
.airpods-btn:hover {
    box-shadow: 0 3px var(--black-color);
    transform: translateY(4px);
  }
.airpods-btn:last-child{
    color: var(--primary-color);
    background-color: var(--white-color);
}

.footer{
    width: 100%;
    height: 25vh;
    position: relative;
}
.icon-link img{
    width: 8rem;
    margin: 0 3rem;
}
.copyright{
    position: absolute; /* to place it in the center horizontally */
    bottom: 2rem;
    letter-spacing: 0.1rem;
    font-size: 1.3rem;
    color: var(--black-color);
    text-shadow: 0.1rem 0.1rem 0.1rem var(--primary-color);
}

@media (max-width:1500px) {
    html{
        font-size: 45%;
    }   
}

@media (max-width:1100px) {
    html{
        font-size: 40%;
    }
    .logo{
        top: 3rem;
        left: 5rem;
    }
    .logo i{
        font-size: 12rem;
    }
    .navbar-link{
        font-weight: 600;
    }
    .controls{
        width: 9rem;
        height: 9rem;
        bottom: -18rem;
    }
    .copyright{
        font-size: 2.5rem;
    }
}

@media (max-width:900px){
    .section-3-content{
        width: 90%;
        top: 4rem;
    }
    .cube{
        width: 25rem;
        height: 45rem;
    }
    .loading-wrapper{
        width: 70%;
    }
    .loading i{
        font-size: 6rem;
    }
    .watch-btn{
        right: 28%;
    }
    .section-5-heading{
        font-size: 12rem;
    }
}

@media (max-width:700px){
    .controls{
        display: none;
    }
    .cube{
        top: 3rem;
        width: 35rem;
        height: 65rem;
    }
    .cube-wrapper{
        opacity: 0.7;
    }
    .section-1-banner{
        position: absolute; /*so the cube ends up behind the banner */
    }
    .section-1 h1{ /*the arrow is hidden, 
        but now the heading element is not placed in the center
        So we have to move it slightly to the left side*/
        position: relative;
        font-size: 8rem;
        left: -5rem;
    }
    .section-1-banner h1::first-letter{ /*to hide the arrow*/
        visibility: hidden;
        opacity: 0;
    }
    .section-1-banner button:hover{ /*so it doesn't change to arrow shape*/
        clip-path: polygon(
            50% 0%, 
            81% 5%, 
            100% 0,
            100% 100%, 
            80% 95%, 
            50% 100%, 
            20% 95%, 
            0 100%, 
            0 0, 
            23% 5%);
    }
    .images{
        width: 70vw;
        height: 70vh;
    }
    .section-3{
        height: 80vh;
    }
    .section-4{
        height: 100vh;
    }
    .section-5{
        height: 70vh;
    }
    .airpods .airpods-img-1{
        display: none;
    }
    .airpods .airpods-img-2{
        width: 100%;
        opacity: 0.8;
        z-index: -1;
    }
    .airpods-btns{
        top: 88%;
    }
    .airpods-btn{
        width: 16rem;
        height: 4rem;
        margin: 0 1rem;
        background-color: var(--white-color);
        color: var(--primary-color);
    }
    .watch-btn{
        left: 65%;
        top: 75%;
    }
    .footer{
        height: 30vh;
    }
    .icon-link img{
        width: 9rem;
        margin: 0 4rem;
    }
}

@media (max-width:550px) {
    html{
        font-size: 38%;
    }
    .navbar-link{
        margin: 0 1.5rem;
    }
    .section-2-heading,
    .section-3-heading,
    .section-5-heading{
        font-size: 8rem;
    }
    .macbook-info-heading{
        font-size: 6.5rem;
    }
    .loading-wrapper{
        width: 60%;
    }
    .loading i{
        font-size: 5rem;
    }
    .macbook-btn{
        width: 15rem;
        height: 3rem;
        font-size: 1.8rem;
    }
    .airpods-btn{
        width: 15rem;
        height: 3.5rem;
        font-size: 1.8rem;
    }
    .airpods-btns{
        width: 50rem;
        text-align: center;
        top: 84%; 
    }
    .airpods-btn{
        width: 13rem;
        height: 3rem;
        margin: 0 0.5rem;
    }
    .icon-link img{
        width: 6rem;
        margin: 2rem 2rem 4rem;
    }
    .copyright{
        font-size: 1.5rem;
    }
}

@media (max-width:450px){
    html{
        font-size: 28%;
    }
    .images{
        width: 75vw;
    }
    .macbook-info-heading{
        font-size: 5.5rem;
    }
    .macbook-price{
        font-size: 2rem;
        font-weight: 300;
    }
    .watch-btn{
        left: 70%;
        top: 75%;
    }
    .airpods-btn{
        font-size: 2.2rem;
        border-radius: 10px;
    }
    .airpods-btn:hover {
        box-shadow: 0 3px var(--black-color);
        transform: translateY(4px);
    }

}